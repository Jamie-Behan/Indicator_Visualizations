=======
---
title: "**Table development starter**"
geometry: "left=0.75in,right=0.75in,top=1in,bottom=1in"
output:
  bookdown::pdf_document2:
    toc: no
    number_sections: false
urlcolor: blue
documentclass: article
header-includes:
    - \usepackage{setspace}\onehalfspacing
    - \usepackage{float}
    - \usepackage{fancyhdr}
    - \pagestyle{fancy}
fontsize: 12pt
sansfont: Calibri
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
library(tidyverse, quietly=T, verbose=F)
library(gt, quietly=T, verbose=F)
```

## Load depth data for regional map
```{r loadMarmapBathy}
# # Pull NOAA bathymetry data, you must provide the latitude/longitude bounds and a resolution (higher resolutions take more time to process)
# Bathy <- getNOAA.bathy(lon1 = -75, lon2 = -62,
#                        lat1 = 39, lat2 = 48, resolution = 1)
# 
# # Now do a bit of data wrangling so we can plot it:
# # Convert data to matrix
# Bathy_Final <- as.matrix(Bathy)
# class(Bathy_Final) <- "matrix"
# 
# # Now reshape it to long format and plot
# BathyData <- Bathy_Final %>%
#   as.data.frame() %>% # Convert the matrix to a data.frame
#   rownames_to_column(var = "lon") %>% # Switch to long format
#   gather(lat, value, -1) %>%
#   mutate_all(funs(as.numeric)) # Make everything a number

# marmap isn't working on my computer so:
BathyData <- read_rds(here::here("Table/Data/BathymetryData.RDS"))
```

### Load NMFS bottom trawl survey data for Atlantic cod
```{r loadSurveyData}
# Load
survey_data <- read.csv(here::here("Table/Data/Survey_Data.csv"))

# Subset to NEFSC BTS WGOM
survey_data <- subset(survey_data, SURVEY=="NEFSC BTS")
survey_data <- subset(survey_data, STOCK=="WGOM")

# Conver to sf object
surveys_sf <- st_as_sf(survey_data, coords=c("LON", "LAT"),
                       na.fail=T)

# Set coordinat ref system (unprojected WGS84)
st_crs(surveys_sf) <- "EPSG: 4326"
```

## Plot distribution of NMFS bottom trawl survey data for Atlantic cod
```{r plotBathySurvey}
# Plot survey points over bathymetry
pointsplot <- ggplot() +
  geom_contour_filled(data = BathyData, aes(x = lon, y = lat, z = value),
                      breaks = c(0, -50, -100, -200, -300, -400, -500, -5000)) + # Specify custom bathymetric lines to keep
  # geom_point_interactive(data=surveys_sf,aes(tooltip=YEAR)) + 
  geom_sf(data=surveys_sf, pch='x', col="black", cex=2, alpha=0.5) + # Increase point size so visible on small graph
  #xlim(st_bbox(surveys_sf)[1], st_bbox(surveys_sf)[3]) +
  #ylim(st_bbox(surveys_sf)[2], st_bbox(surveys_sf)[4]) +
  xlab("Longitude") + # Update axis labels
  ylab("Latitude") +
  scale_fill_manual(values =  c("#DEF5E5FF", "#A0DFB9FF", "#54C9ADFF", "#38AAACFF", "#348AA6FF", "#366A9FFF", "#40498EFF"), name = "Depth (m)", labels = c("[0,50)", "[50,100)", "[100, 200)", "[200, 300)", "[300,400)", "[400,500)", "[500,5000)" )) + # Pick specific colors and label them to match the bathymetric lines so we end up with a nice legend and colors
  coord_sf(xlim = c(-71, -66.0),  ylim = c(40.0, 44.5)) + # Trim the map dimensions a bit and fix the horizontal stretch. !!! Change this if you want to zoom in/out on a specific area
  theme_void() + # Change the background theme, there are lots of options to explore
  theme(panel.background=element_rect(fill="gray"), legend.position = "none")

plot(pointsplot)
```

# Table for RStudio table competition 2022

```{r}
### BT anomaly
bottom_temp<-ecodata::bottom_temp
bottom_temp<-bottom_temp[(bottom_temp$EPU == "GOM") & (bottom_temp$Var == "bottom temp anomaly in situ"), ]
bottom_temp<-bottom_temp[c(1,3)]
names(bottom_temp)[1] <- "Year"
names(bottom_temp)[2] <- "Anomalies"
bt_temp <- bottom_temp %>% filter(Year > 1979)

#### Adding other ecodata rows
### SST anomaly
sst_temp<-ecodata::bottom_temp
sst_temp<-sst_temp[(sst_temp$EPU == "GOM")&(sst_temp$Var == "sst anomaly in situ"), ]
sst_temp<-sst_temp[c(1,3)]
names(sst_temp)[1] <- "Year"
names(sst_temp)[2] <- "sstAnomalies"
sst_temp <- sst_temp %>% filter(Year > 1979)

### GSI
gsi <- ecodata::gsi %>%
  dplyr::mutate(Year = Time %>%
                  stringr::str_trunc(4, "right", "") %>%
                  as.numeric(),
                Month = Time %>%
                  stringr::str_trunc(2, "left", "") %>%
                  as.numeric(),
                Month = ifelse(Month == 0.1, 10, Month))
gsi<-aggregate(Value~Year,data=gsi,FUN="mean")
names(gsi)[2] <- "GSI"
gsi <- gsi %>% filter(Year > 1979) 

### Annual mean survey #/tow
BTS_Survey<-data.frame(survey_data[(survey_data$STOCK == "WGOM"), ])
BTS_Survey<-aggregate(COD_N~YEAR,data=BTS_Survey,FUN ="mean")
names(BTS_Survey)[2]<-"COD_N"
BTS_Survey <- BTS_Survey %>% filter(YEAR > 1979)


dplyr::tibble(Dataset=c("Bottom Temperature Anomaly", "National Marine Fisheries Service (NMFS) Bottom Trawl Survey", "Sea Surface Temperature (SST) Anomalies", "Gulf Stream Index (GSI)"),
               Description= c("In situ bottom temperature anomaly values (1981-2010 reference period)", "NMFS Bottom Trawl Survey observations for Atlantic cod(1963-2022)", "In situ SST anomaly values (1981-2010 reference period)", "Degrees latitude above the average Gulf Stream position based on ocean temperature at 200 m (15 °C) depth between 55°W to 75°W"),
               Units= c("°C", "Number of fish per/tow", "°C", "Δ Degrees latitude"),
               Source= c("ecodata package in R", "National Oceanic and Atmospheric Adminsitration (NOAA)", "ecodata package in R", "ecodata package in R"),
               Timeseries= list(c(bottom_temp$Anomalies), c(BTS_Survey$COD_N), c(sst_temp$sstAnomalies), c(gsi$GSI)), 
              Distribution = list(bottom_temp$Anomalies,NA,sst_temp$sstAnomalies,gsi$GSI)) %>% # Placeholder tibble with NA for map
  gt() %>% # Turn tibble into gt table
  gt_plt_sparkline(Timeseries,fig_dim = c(50,60), same_limit=FALSE) %>%
  gt_plt_dist(Distribution, fig_dim=c(50,60)) %>% # Can't specify certain rows in table (must be before text_transform that adds plot or else it overwrites)
  text_transform(
    locations = cells_body(columns = Distribution, rows = c(2)), # Turn map object into ggplot image !!!! will overwrite Distribution plots, to add or remove must change both Distribution list and rows vector here !!!!
    fn = function(x){
      pointsplot %>% ggplot_image(height = px(200))
    }
  ) %>% 
  gt_plt_sparkline(Timeseries, fig_dim = c(50,60),label = TRUE,type = "points")
  
```
